/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../../common";

export declare namespace Voting {
  export type VoteStruct = { choiceIndex: BigNumberish; hasVoted: boolean };

  export type VoteStructOutput = [number, boolean] & {
    choiceIndex: number;
    hasVoted: boolean;
  };

  export type BallotStruct = {
    subject: string;
    closed: boolean;
    tagIndex: BigNumberish;
  };

  export type BallotStructOutput = [string, boolean, number] & {
    subject: string;
    closed: boolean;
    tagIndex: number;
  };
}

export declare namespace ExposedVoting {
  export type ResultSampleStruct = { voter: string; vote: Voting.VoteStruct };

  export type ResultSampleStructOutput = [string, Voting.VoteStructOutput] & {
    voter: string;
    vote: Voting.VoteStructOutput;
  };
}

export interface ExposedVotingInterface extends utils.Interface {
  functions: {
    "DPS()": FunctionFragment;
    "_delegates(address,uint32)": FunctionFragment;
    "_proxyVoters(address,uint32)": FunctionFragment;
    "_results(uint256)": FunctionFragment;
    "addTag(string)": FunctionFragment;
    "ballots(uint256)": FunctionFragment;
    "choices(uint256,uint256)": FunctionFragment;
    "closeBallot(uint32)": FunctionFragment;
    "createBallot(string,uint32,string[])": FunctionFragment;
    "getAllResults()": FunctionFragment;
    "getBallotResult(uint256)": FunctionFragment;
    "getBallots()": FunctionFragment;
    "getChoices()": FunctionFragment;
    "getTags()": FunctionFragment;
    "grantProxy(address,uint32)": FunctionFragment;
    "owner()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "resultStorage(uint256,uint256)": FunctionFragment;
    "tags(uint256)": FunctionFragment;
    "totalProxyAmount(address,uint32)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "vote(uint32,uint32)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "DPS"
      | "_delegates"
      | "_proxyVoters"
      | "_results"
      | "addTag"
      | "ballots"
      | "choices"
      | "closeBallot"
      | "createBallot"
      | "getAllResults"
      | "getBallotResult"
      | "getBallots"
      | "getChoices"
      | "getTags"
      | "grantProxy"
      | "owner"
      | "renounceOwnership"
      | "resultStorage"
      | "tags"
      | "totalProxyAmount"
      | "transferOwnership"
      | "vote"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "DPS", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "_delegates",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "_proxyVoters",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "_results",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "addTag", values: [string]): string;
  encodeFunctionData(
    functionFragment: "ballots",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "choices",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "closeBallot",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createBallot",
    values: [string, BigNumberish, string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getAllResults",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getBallotResult",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getBallots",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getChoices",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getTags", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "grantProxy",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "resultStorage",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "tags", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "totalProxyAmount",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "vote",
    values: [BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "DPS", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "_delegates", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "_proxyVoters",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "_results", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "addTag", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ballots", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "choices", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "closeBallot",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createBallot",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllResults",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBallotResult",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getBallots", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getChoices", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getTags", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "grantProxy", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "resultStorage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "tags", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalProxyAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "vote", data: BytesLike): Result;

  events: {
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface ExposedVoting extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ExposedVotingInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    DPS(overrides?: CallOverrides): Promise<[string]>;

    _delegates(
      to: string,
      tagIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string[]]>;

    _proxyVoters(
      from: string,
      tagIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    _results(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[ExposedVoting.ResultSampleStructOutput[]]>;

    addTag(
      name: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    ballots(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, boolean, number] & {
        subject: string;
        closed: boolean;
        tagIndex: number;
      }
    >;

    choices(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    closeBallot(
      ballotIndex: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    createBallot(
      subject: string,
      tagIndex: BigNumberish,
      _choices: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getAllResults(overrides?: CallOverrides): Promise<[BigNumber[][]]>;

    getBallotResult(
      ballotIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    getBallots(
      overrides?: CallOverrides
    ): Promise<[Voting.BallotStructOutput[]]>;

    getChoices(overrides?: CallOverrides): Promise<[string[][]]>;

    getTags(overrides?: CallOverrides): Promise<[string[]]>;

    grantProxy(
      to: string,
      tagIndex: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    resultStorage(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    tags(arg0: BigNumberish, overrides?: CallOverrides): Promise<[string]>;

    totalProxyAmount(
      voter: string,
      tagIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    vote(
      ballotIndex: BigNumberish,
      choiceIndex: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  DPS(overrides?: CallOverrides): Promise<string>;

  _delegates(
    to: string,
    tagIndex: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string[]>;

  _proxyVoters(
    from: string,
    tagIndex: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  _results(
    index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<ExposedVoting.ResultSampleStructOutput[]>;

  addTag(
    name: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  ballots(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [string, boolean, number] & {
      subject: string;
      closed: boolean;
      tagIndex: number;
    }
  >;

  choices(
    arg0: BigNumberish,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  closeBallot(
    ballotIndex: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  createBallot(
    subject: string,
    tagIndex: BigNumberish,
    _choices: string[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getAllResults(overrides?: CallOverrides): Promise<BigNumber[][]>;

  getBallotResult(
    ballotIndex: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  getBallots(overrides?: CallOverrides): Promise<Voting.BallotStructOutput[]>;

  getChoices(overrides?: CallOverrides): Promise<string[][]>;

  getTags(overrides?: CallOverrides): Promise<string[]>;

  grantProxy(
    to: string,
    tagIndex: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  resultStorage(
    arg0: BigNumberish,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  tags(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  totalProxyAmount(
    voter: string,
    tagIndex: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  vote(
    ballotIndex: BigNumberish,
    choiceIndex: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    DPS(overrides?: CallOverrides): Promise<string>;

    _delegates(
      to: string,
      tagIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string[]>;

    _proxyVoters(
      from: string,
      tagIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    _results(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<ExposedVoting.ResultSampleStructOutput[]>;

    addTag(name: string, overrides?: CallOverrides): Promise<void>;

    ballots(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, boolean, number] & {
        subject: string;
        closed: boolean;
        tagIndex: number;
      }
    >;

    choices(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    closeBallot(
      ballotIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    createBallot(
      subject: string,
      tagIndex: BigNumberish,
      _choices: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    getAllResults(overrides?: CallOverrides): Promise<BigNumber[][]>;

    getBallotResult(
      ballotIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    getBallots(overrides?: CallOverrides): Promise<Voting.BallotStructOutput[]>;

    getChoices(overrides?: CallOverrides): Promise<string[][]>;

    getTags(overrides?: CallOverrides): Promise<string[]>;

    grantProxy(
      to: string,
      tagIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    owner(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    resultStorage(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tags(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

    totalProxyAmount(
      voter: string,
      tagIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    vote(
      ballotIndex: BigNumberish,
      choiceIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
  };

  estimateGas: {
    DPS(overrides?: CallOverrides): Promise<BigNumber>;

    _delegates(
      to: string,
      tagIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    _proxyVoters(
      from: string,
      tagIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    _results(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    addTag(
      name: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    ballots(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    choices(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    closeBallot(
      ballotIndex: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    createBallot(
      subject: string,
      tagIndex: BigNumberish,
      _choices: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getAllResults(overrides?: CallOverrides): Promise<BigNumber>;

    getBallotResult(
      ballotIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getBallots(overrides?: CallOverrides): Promise<BigNumber>;

    getChoices(overrides?: CallOverrides): Promise<BigNumber>;

    getTags(overrides?: CallOverrides): Promise<BigNumber>;

    grantProxy(
      to: string,
      tagIndex: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    resultStorage(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tags(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    totalProxyAmount(
      voter: string,
      tagIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    vote(
      ballotIndex: BigNumberish,
      choiceIndex: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    DPS(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    _delegates(
      to: string,
      tagIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    _proxyVoters(
      from: string,
      tagIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    _results(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    addTag(
      name: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    ballots(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    choices(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    closeBallot(
      ballotIndex: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    createBallot(
      subject: string,
      tagIndex: BigNumberish,
      _choices: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getAllResults(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getBallotResult(
      ballotIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getBallots(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getChoices(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getTags(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    grantProxy(
      to: string,
      tagIndex: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    resultStorage(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tags(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalProxyAmount(
      voter: string,
      tagIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    vote(
      ballotIndex: BigNumberish,
      choiceIndex: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
