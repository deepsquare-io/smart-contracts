/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  ExposedBallot,
  ExposedBallotInterface,
} from "../../../contracts/testing/ExposedBallot";

const _abi = [
  {
    inputs: [
      {
        internalType: "contract IERC20Metadata",
        name: "_DPS",
        type: "address",
      },
      {
        internalType: "contract VotingDelegation",
        name: "_proxy",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    inputs: [],
    name: "DPS",
    outputs: [
      {
        internalType: "contract IERC20Metadata",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "_results",
    outputs: [
      {
        components: [
          {
            internalType: "address",
            name: "voter",
            type: "address",
          },
          {
            components: [
              {
                internalType: "uint32",
                name: "choiceIndex",
                type: "uint32",
              },
              {
                internalType: "bool",
                name: "hasVoted",
                type: "bool",
              },
            ],
            internalType: "struct Ballot.Vote",
            name: "vote",
            type: "tuple",
          },
        ],
        internalType: "struct ExposedBallot.ResultSample[]",
        name: "",
        type: "tuple[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "choices",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "close",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "closed",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getChoices",
    outputs: [
      {
        internalType: "string[]",
        name: "",
        type: "string[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getResults",
    outputs: [
      {
        internalType: "uint256[]",
        name: "",
        type: "uint256[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "_subject",
        type: "string",
      },
      {
        internalType: "string",
        name: "_topic",
        type: "string",
      },
      {
        internalType: "string[]",
        name: "_choices",
        type: "string[]",
      },
    ],
    name: "init",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "proxy",
    outputs: [
      {
        internalType: "contract VotingDelegation",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "resultStorage",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "subject",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "topic",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint32",
        name: "choiceIndex",
        type: "uint32",
      },
    ],
    name: "vote",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x60c060405269054b40b1f852bda0000060a0523480156200001f57600080fd5b50604051620016f3380380620016f383398101604081905262000042916200013f565b81816200004f33620000d6565b6001600160a01b038216620000aa5760405162461bcd60e51b815260206004820152601a60248201527f566f74653a204450532061646472657373206973207a65726f2e000000000000604482015260640160405180910390fd5b6001600160a01b03918216608052600180546001600160a01b03191691909216179055506200017e9050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6001600160a01b03811681146200013c57600080fd5b50565b600080604083850312156200015357600080fd5b8251620001608162000126565b6020840151909250620001738162000126565b809150509250929050565b60805160a051611541620001b260003960006108e101526000818161021d015281816105ac015261090301526115416000f3fe608060405234801561001057600080fd5b50600436106101005760003560e01c80639094c76311610097578063ec55688911610066578063ec55688914610205578063ef4e06ec14610218578063f2fde38b1461023f578063f6fd7fde1461025257600080fd5b80639094c763146101c257806398c81bbf146101d5578063bf63a577146101ea578063e254be56146101f257600080fd5b806359037b89116100d357806359037b8914610157578063597e1fb514610178578063715018a6146101955780638da5cb5b1461019d57600080fd5b80630a59a98c1461010557806327454ea81461012357806343d726d6146101385780634717f97c14610142575b600080fd5b61010d610265565b60405161011a9190610ffa565b60405180910390f35b61012b6102f3565b60405161011a9190611014565b610140610446565b005b61014a61069a565b60405161011a919061107f565b61016a6101653660046110c3565b6106f2565b60405190815260200161011a565b6003546101859060ff1681565b604051901515815260200161011a565b610140610713565b6000546001600160a01b03165b6040516001600160a01b03909116815260200161011a565b6101406101d03660046110dc565b610749565b6101dd610a7d565b60405161011a9190611102565b61010d610b56565b61014061020036600461121b565b610b63565b6001546101aa906001600160a01b031681565b6101aa7f000000000000000000000000000000000000000000000000000000000000000081565b61014061024d366004611325565b610cd2565b61010d6102603660046110c3565b610d6a565b600280546102729061134e565b80601f016020809104026020016040519081016040528092919081815260200182805461029e9061134e565b80156102eb5780601f106102c0576101008083540402835291602001916102eb565b820191906000526020600020905b8154815290600101906020018083116102ce57829003601f168201915b505050505081565b60075460609060009067ffffffffffffffff81111561031457610314611164565b60405190808252806020026020018201604052801561034d57816020015b61033a610de5565b8152602001906001900390816103325790505b50905060005b6007548110156104405760405180604001604052806007838154811061037b5761037b611383565b9060005260206000200160009054906101000a90046001600160a01b03166001600160a01b0316815260200160086000600785815481106103be576103be611383565b60009182526020808320909101546001600160a01b03168352828101939093526040918201902081518083019092525463ffffffff8116825260ff640100000000909104161515918101919091529052825183908390811061042257610422611383565b60200260200101819052508080610438906113af565b915050610353565b50919050565b6000546001600160a01b031633146104795760405162461bcd60e51b8152600401610470906113ca565b60405180910390fd5b60035460ff16156104cc5760405162461bcd60e51b815260206004820152601e60248201527f566f74696e673a2042616c6c6f7420616c726561647920636c6f7365642e00006044820152606401610470565b6003805460ff1916600117905560005b600754811015610697576000600782815481106104fb576104fb611383565b6000918252602090912001546001546040516302fbd00360e21b81526001600160a01b039283169350911690630bef400c9061053d90849060049081016113ff565b60206040518083038186803b15801561055557600080fd5b505afa158015610569573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061058d91906114b8565b6040516370a0823160e01b81526001600160a01b0383811660048301527f000000000000000000000000000000000000000000000000000000000000000016906370a082319060240160206040518083038186803b1580156105ee57600080fd5b505afa158015610602573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061062691906114b8565b61063091906114d1565b6001600160a01b03821660009081526008602052604090205460068054909163ffffffff1690811061066457610664611383565b90600052602060002001600082825461067d91906114d1565b9091555082915061068f9050816113af565b9150506104dc565b50565b606060068054806020026020016040519081016040528092919081815260200182805480156106e857602002820191906000526020600020905b8154815260200190600101908083116106d4575b5050505050905090565b6006818154811061070257600080fd5b600091825260209091200154905081565b6000546001600160a01b0316331461073d5760405162461bcd60e51b8152600401610470906113ca565b6107476000610d95565b565b60035460ff161561079c5760405162461bcd60e51b815260206004820152601960248201527f566f74696e673a2042616c6c6f7420697320636c6f7365642e000000000000006044820152606401610470565b60055463ffffffff8216106107fd5760405162461bcd60e51b815260206004820152602160248201527f566f74696e673a2043686f69636520696e64657820697320746f6f20686967686044820152601760f91b6064820152608401610470565b60015460405163442f655160e01b81526001600160a01b039091169063442f65519061082f90339060049081016113ff565b60206040518083038186803b15801561084757600080fd5b505afa15801561085b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061087f91906114e9565b156108cc5760405162461bcd60e51b815260206004820152601a60248201527f566f74696e673a20566f74652069732064656c6567617465642e0000000000006044820152606401610470565b6040516370a0823160e01b81523360048201527f0000000000000000000000000000000000000000000000000000000000000000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a082319060240160206040518083038186803b15801561094d57600080fd5b505afa158015610961573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061098591906114b8565b10156109d35760405162461bcd60e51b815260206004820152601f60248201527f566f74696e673a204e6f7420656e6f7567682044505320746f20766f74652e006044820152606401610470565b33600090815260086020526040902054640100000000900460ff16610a5457336000818152600860205260408120805464ff0000000019166401000000001790556007805460018101825591527fa66cc928b5edb82af9bd49922954155ab7b0942694bea4ce44661d9a8736c6880180546001600160a01b03191690911790555b336000908152600860205260409020805463ffffffff191663ffffffff92909216919091179055565b60606005805480602002602001604051908101604052809291908181526020016000905b82821015610b4d578382906000526020600020018054610ac09061134e565b80601f0160208091040260200160405190810160405280929190818152602001828054610aec9061134e565b8015610b395780601f10610b0e57610100808354040283529160200191610b39565b820191906000526020600020905b815481529060010190602001808311610b1c57829003601f168201915b505050505081526020019060010190610aa1565b50505050905090565b600480546102729061134e565b600054600160a81b900460ff16610b8757600054600160a01b900460ff1615610b8b565b303b155b610bee5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610470565b600054600160a81b900460ff16158015610c18576000805461ffff60a01b191661010160a01b1790555b8351610c2b906002906020870190610e2a565b508251610c3f906004906020860190610e2a565b506003805460ff191690558151610c5d906005906020850190610eae565b5060055467ffffffffffffffff811115610c7957610c79611164565b604051908082528060200260200182016040528015610ca2578160200160208202803683370190505b508051610cb791600691602090910190610f07565b508015610ccc576000805460ff60a81b191690555b50505050565b6000546001600160a01b03163314610cfc5760405162461bcd60e51b8152600401610470906113ca565b6001600160a01b038116610d615760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610470565b61069781610d95565b60058181548110610d7a57600080fd5b9060005260206000200160009150905080546102729061134e565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b604051806040016040528060006001600160a01b03168152602001610e256040518060400160405280600063ffffffff1681526020016000151581525090565b905290565b828054610e369061134e565b90600052602060002090601f016020900481019282610e585760008555610e9e565b82601f10610e7157805160ff1916838001178555610e9e565b82800160010185558215610e9e579182015b82811115610e9e578251825591602001919060010190610e83565b50610eaa929150610f41565b5090565b828054828255906000526020600020908101928215610efb579160200282015b82811115610efb5782518051610eeb918491602090910190610e2a565b5091602001919060010190610ece565b50610eaa929150610f56565b828054828255906000526020600020908101928215610e9e5791602002820182811115610e9e578251825591602001919060010190610e83565b5b80821115610eaa5760008155600101610f42565b80821115610eaa576000610f6a8282610f73565b50600101610f56565b508054610f7f9061134e565b6000825580601f10610f8f575050565b601f0160209004906000526020600020908101906106979190610f41565b6000815180845260005b81811015610fd357602081850181015186830182015201610fb7565b81811115610fe5576000602083870101525b50601f01601f19169290920160200192915050565b60208152600061100d6020830184610fad565b9392505050565b602080825282518282018190526000919060409081850190868401855b8281101561107257815180516001600160a01b03168552860151805163ffffffff168786015286015115158585015260609093019290850190600101611031565b5091979650505050505050565b6020808252825182820181905260009190848201906040850190845b818110156110b75783518352928401929184019160010161109b565b50909695505050505050565b6000602082840312156110d557600080fd5b5035919050565b6000602082840312156110ee57600080fd5b813563ffffffff8116811461100d57600080fd5b6000602080830181845280855180835260408601915060408160051b870101925083870160005b8281101561115757603f19888603018452611145858351610fad565b94509285019290850190600101611129565b5092979650505050505050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff811182821017156111a3576111a3611164565b604052919050565b600082601f8301126111bc57600080fd5b813567ffffffffffffffff8111156111d6576111d6611164565b6111e9601f8201601f191660200161117a565b8181528460208386010111156111fe57600080fd5b816020850160208301376000918101602001919091529392505050565b60008060006060848603121561123057600080fd5b833567ffffffffffffffff8082111561124857600080fd5b611254878388016111ab565b945060209150818601358181111561126b57600080fd5b611277888289016111ab565b94505060408601358181111561128c57600080fd5b8601601f8101881361129d57600080fd5b8035828111156112af576112af611164565b8060051b6112be85820161117a565b918252828101850191858101908b8411156112d857600080fd5b86850192505b83831015611314578235868111156112f65760008081fd5b6113048d89838901016111ab565b83525091860191908601906112de565b809750505050505050509250925092565b60006020828403121561133757600080fd5b81356001600160a01b038116811461100d57600080fd5b600181811c9082168061136257607f821691505b6020821081141561044057634e487b7160e01b600052602260045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b60006000198214156113c3576113c3611399565b5060010190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60018060a01b0383168152600060206040818401526000845481600182811c91508083168061142f57607f831692505b85831081141561144d57634e487b7160e01b85526022600452602485fd5b604088018390526060880181801561146c576001811461147d576114a8565b60ff198616825287820196506114a8565b60008b81526020902060005b868110156114a257815484820152908501908901611489565b83019750505b50949a9950505050505050505050565b6000602082840312156114ca57600080fd5b5051919050565b600082198211156114e4576114e4611399565b500190565b6000602082840312156114fb57600080fd5b8151801515811461100d57600080fdfea26469706673582212206ad87eee659303e33b667671e7df60761cf4b91048252020db33d5731fdf09d164736f6c63430008090033";

type ExposedBallotConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ExposedBallotConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class ExposedBallot__factory extends ContractFactory {
  constructor(...args: ExposedBallotConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _DPS: string,
    _proxy: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ExposedBallot> {
    return super.deploy(
      _DPS,
      _proxy,
      overrides || {}
    ) as Promise<ExposedBallot>;
  }
  override getDeployTransaction(
    _DPS: string,
    _proxy: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_DPS, _proxy, overrides || {});
  }
  override attach(address: string): ExposedBallot {
    return super.attach(address) as ExposedBallot;
  }
  override connect(signer: Signer): ExposedBallot__factory {
    return super.connect(signer) as ExposedBallot__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ExposedBallotInterface {
    return new utils.Interface(_abi) as ExposedBallotInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): ExposedBallot {
    return new Contract(address, _abi, signerOrProvider) as ExposedBallot;
  }
}
