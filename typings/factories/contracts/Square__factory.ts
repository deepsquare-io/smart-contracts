/* Autogenerated file. Do not edit manually. */

/* tslint:disable */

/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from 'ethers';
import type { Provider, TransactionRequest } from '@ethersproject/providers';
import type { Square, SquareInterface } from '../../contracts/Square';

const _abi = [
  {
    inputs: [],
    stateMutability: 'nonpayable',
    type: 'constructor',
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: 'address',
        name: 'owner',
        type: 'address',
      },
      {
        indexed: true,
        internalType: 'address',
        name: 'spender',
        type: 'address',
      },
      {
        indexed: false,
        internalType: 'uint256',
        name: 'value',
        type: 'uint256',
      },
    ],
    name: 'Approval',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: 'address',
        name: 'previousOwner',
        type: 'address',
      },
      {
        indexed: true,
        internalType: 'address',
        name: 'newOwner',
        type: 'address',
      },
    ],
    name: 'OwnershipTransferred',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: 'address',
        name: 'from',
        type: 'address',
      },
      {
        indexed: true,
        internalType: 'address',
        name: 'to',
        type: 'address',
      },
      {
        indexed: false,
        internalType: 'uint256',
        name: 'value',
        type: 'uint256',
      },
    ],
    name: 'Transfer',
    type: 'event',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: 'owner',
        type: 'address',
      },
      {
        internalType: 'address',
        name: 'spender',
        type: 'address',
      },
    ],
    name: 'allowance',
    outputs: [
      {
        internalType: 'uint256',
        name: '',
        type: 'uint256',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: 'spender',
        type: 'address',
      },
      {
        internalType: 'uint256',
        name: 'amount',
        type: 'uint256',
      },
    ],
    name: 'approve',
    outputs: [
      {
        internalType: 'bool',
        name: '',
        type: 'bool',
      },
    ],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: 'account',
        type: 'address',
      },
    ],
    name: 'balanceOf',
    outputs: [
      {
        internalType: 'uint256',
        name: '',
        type: 'uint256',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'decimals',
    outputs: [
      {
        internalType: 'uint8',
        name: '',
        type: 'uint8',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: 'spender',
        type: 'address',
      },
      {
        internalType: 'uint256',
        name: 'subtractedValue',
        type: 'uint256',
      },
    ],
    name: 'decreaseAllowance',
    outputs: [
      {
        internalType: 'bool',
        name: '',
        type: 'bool',
      },
    ],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: 'spender',
        type: 'address',
      },
      {
        internalType: 'uint256',
        name: 'addedValue',
        type: 'uint256',
      },
    ],
    name: 'increaseAllowance',
    outputs: [
      {
        internalType: 'bool',
        name: '',
        type: 'bool',
      },
    ],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [],
    name: 'name',
    outputs: [
      {
        internalType: 'string',
        name: '',
        type: 'string',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'owner',
    outputs: [
      {
        internalType: 'address',
        name: '',
        type: 'address',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'renounceOwnership',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [],
    name: 'symbol',
    outputs: [
      {
        internalType: 'string',
        name: '',
        type: 'string',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'totalSupply',
    outputs: [
      {
        internalType: 'uint256',
        name: '',
        type: 'uint256',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: 'to',
        type: 'address',
      },
      {
        internalType: 'uint256',
        name: 'amount',
        type: 'uint256',
      },
    ],
    name: 'transfer',
    outputs: [
      {
        internalType: 'bool',
        name: '',
        type: 'bool',
      },
    ],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: 'from',
        type: 'address',
      },
      {
        internalType: 'address',
        name: 'to',
        type: 'address',
      },
      {
        internalType: 'uint256',
        name: 'amount',
        type: 'uint256',
      },
    ],
    name: 'transferFrom',
    outputs: [
      {
        internalType: 'bool',
        name: '',
        type: 'bool',
      },
    ],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: 'newOwner',
        type: 'address',
      },
    ],
    name: 'transferOwnership',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
];

const _bytecode =
  '0x60806040523480156200001157600080fd5b506040518060400160405280600681526020017f53717561726500000000000000000000000000000000000000000000000000008152506040518060400160405280600381526020017f5351520000000000000000000000000000000000000000000000000000000000815250816003908051906020019062000096929190620003e5565b508060049080519060200190620000af929190620003e5565b505050620000d2620000c66200019160201b60201c565b6200019960201b60201c565b620001067f7ddaa8643604fb4f513b12eb8f8e333f773a67a913c26dd720f96d1d9d16e33160001b6200025f60201b60201c565b6200013a7fda99acbeb7eb1637f548c5435fcb389acbe994e9c40fc00b0151ce6e8028eb1160001b6200025f60201b60201c565b6200016e7fa17bab3bfe50918c0613224d4b6bfd7766eb04c009387d1edb8a609c6fa5525460001b6200025f60201b60201c565b6200018b336aadb53acfa41aee120000006200026260201b60201c565b62000641565b600033905090565b6000600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b50565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415620002d5576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620002cc90620004f6565b60405180910390fd5b620002e960008383620003db60201b60201c565b8060026000828254620002fd919062000551565b92505081905550806000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825462000354919062000551565b925050819055508173ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef83604051620003bb9190620005bf565b60405180910390a3620003d760008383620003e060201b60201c565b5050565b505050565b505050565b828054620003f3906200060b565b90600052602060002090601f01602090048101928262000417576000855562000463565b82601f106200043257805160ff191683800117855562000463565b8280016001018555821562000463579182015b828111156200046257825182559160200191906001019062000445565b5b50905062000472919062000476565b5090565b5b808211156200049157600081600090555060010162000477565b5090565b600082825260208201905092915050565b7f45524332303a206d696e7420746f20746865207a65726f206164647265737300600082015250565b6000620004de601f8362000495565b9150620004eb82620004a6565b602082019050919050565b600060208201905081810360008301526200051181620004cf565b9050919050565b6000819050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006200055e8262000518565b91506200056b8362000518565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115620005a357620005a262000522565b5b828201905092915050565b620005b98162000518565b82525050565b6000602082019050620005d66000830184620005ae565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806200062457607f821691505b602082108114156200063b576200063a620005dc565b5b50919050565b61176b80620006516000396000f3fe608060405234801561001057600080fd5b50600436106100ea5760003560e01c8063715018a61161008c578063a457c2d711610066578063a457c2d71461024f578063a9059cbb1461027f578063dd62ed3e146102af578063f2fde38b146102df576100ea565b8063715018a6146102095780638da5cb5b1461021357806395d89b4114610231576100ea565b806323b872dd116100c857806323b872dd1461015b578063313ce5671461018b57806339509351146101a957806370a08231146101d9576100ea565b806306fdde03146100ef578063095ea7b31461010d57806318160ddd1461013d575b600080fd5b6100f76102fb565b6040516101049190610efd565b60405180910390f35b61012760048036038101906101229190610fb8565b61038d565b6040516101349190611013565b60405180910390f35b6101456103b0565b604051610152919061103d565b60405180910390f35b61017560048036038101906101709190611058565b6103ba565b6040516101829190611013565b60405180910390f35b6101936103e9565b6040516101a091906110c7565b60405180910390f35b6101c360048036038101906101be9190610fb8565b6103f2565b6040516101d09190611013565b60405180910390f35b6101f360048036038101906101ee91906110e2565b61049c565b604051610200919061103d565b60405180910390f35b6102116104e4565b005b61021b61056c565b604051610228919061111e565b60405180910390f35b610239610596565b6040516102469190610efd565b60405180910390f35b61026960048036038101906102649190610fb8565b610628565b6040516102769190611013565b60405180910390f35b61029960048036038101906102949190610fb8565b610712565b6040516102a69190611013565b60405180910390f35b6102c960048036038101906102c49190611139565b610735565b6040516102d6919061103d565b60405180910390f35b6102f960048036038101906102f491906110e2565b6107bc565b005b60606003805461030a906111a8565b80601f0160208091040260200160405190810160405280929190818152602001828054610336906111a8565b80156103835780601f1061035857610100808354040283529160200191610383565b820191906000526020600020905b81548152906001019060200180831161036657829003601f168201915b5050505050905090565b6000806103986108b4565b90506103a58185856108bc565b600191505092915050565b6000600254905090565b6000806103c56108b4565b90506103d2858285610a87565b6103dd858585610b13565b60019150509392505050565b60006012905090565b6000806103fd6108b4565b9050610491818585600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461048c9190611209565b6108bc565b600191505092915050565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6104ec6108b4565b73ffffffffffffffffffffffffffffffffffffffff1661050a61056c565b73ffffffffffffffffffffffffffffffffffffffff1614610560576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610557906112ab565b60405180910390fd5b61056a6000610d94565b565b6000600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6060600480546105a5906111a8565b80601f01602080910402602001604051908101604052809291908181526020018280546105d1906111a8565b801561061e5780601f106105f35761010080835404028352916020019161061e565b820191906000526020600020905b81548152906001019060200180831161060157829003601f168201915b5050505050905090565b6000806106336108b4565b90506000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050838110156106f9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106f09061133d565b60405180910390fd5b61070682868684036108bc565b60019250505092915050565b60008061071d6108b4565b905061072a818585610b13565b600191505092915050565b6000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b6107c46108b4565b73ffffffffffffffffffffffffffffffffffffffff166107e261056c565b73ffffffffffffffffffffffffffffffffffffffff1614610838576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161082f906112ab565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156108a8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161089f906113cf565b60405180910390fd5b6108b181610d94565b50565b600033905090565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141561092c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161092390611461565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141561099c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610993906114f3565b60405180910390fd5b80600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92583604051610a7a919061103d565b60405180910390a3505050565b6000610a938484610735565b90507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8114610b0d5781811015610aff576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610af69061155f565b60405180910390fd5b610b0c84848484036108bc565b5b50505050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415610b83576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b7a906115f1565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610bf3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bea90611683565b60405180910390fd5b610bfe838383610e5a565b60008060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905081811015610c84576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c7b90611715565b60405180910390fd5b8181036000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550816000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254610d179190611209565b925050819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef84604051610d7b919061103d565b60405180910390a3610d8e848484610e5f565b50505050565b6000600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b505050565b505050565b600081519050919050565b600082825260208201905092915050565b60005b83811015610e9e578082015181840152602081019050610e83565b83811115610ead576000848401525b50505050565b6000601f19601f8301169050919050565b6000610ecf82610e64565b610ed98185610e6f565b9350610ee9818560208601610e80565b610ef281610eb3565b840191505092915050565b60006020820190508181036000830152610f178184610ec4565b905092915050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610f4f82610f24565b9050919050565b610f5f81610f44565b8114610f6a57600080fd5b50565b600081359050610f7c81610f56565b92915050565b6000819050919050565b610f9581610f82565b8114610fa057600080fd5b50565b600081359050610fb281610f8c565b92915050565b60008060408385031215610fcf57610fce610f1f565b5b6000610fdd85828601610f6d565b9250506020610fee85828601610fa3565b9150509250929050565b60008115159050919050565b61100d81610ff8565b82525050565b60006020820190506110286000830184611004565b92915050565b61103781610f82565b82525050565b6000602082019050611052600083018461102e565b92915050565b60008060006060848603121561107157611070610f1f565b5b600061107f86828701610f6d565b935050602061109086828701610f6d565b92505060406110a186828701610fa3565b9150509250925092565b600060ff82169050919050565b6110c1816110ab565b82525050565b60006020820190506110dc60008301846110b8565b92915050565b6000602082840312156110f8576110f7610f1f565b5b600061110684828501610f6d565b91505092915050565b61111881610f44565b82525050565b6000602082019050611133600083018461110f565b92915050565b600080604083850312156111505761114f610f1f565b5b600061115e85828601610f6d565b925050602061116f85828601610f6d565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806111c057607f821691505b602082108114156111d4576111d3611179565b5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061121482610f82565b915061121f83610f82565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115611254576112536111da565b5b828201905092915050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b6000611295602083610e6f565b91506112a08261125f565b602082019050919050565b600060208201905081810360008301526112c481611288565b9050919050565b7f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f7760008201527f207a65726f000000000000000000000000000000000000000000000000000000602082015250565b6000611327602583610e6f565b9150611332826112cb565b604082019050919050565b600060208201905081810360008301526113568161131a565b9050919050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b60006113b9602683610e6f565b91506113c48261135d565b604082019050919050565b600060208201905081810360008301526113e8816113ac565b9050919050565b7f45524332303a20617070726f76652066726f6d20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b600061144b602483610e6f565b9150611456826113ef565b604082019050919050565b6000602082019050818103600083015261147a8161143e565b9050919050565b7f45524332303a20617070726f766520746f20746865207a65726f20616464726560008201527f7373000000000000000000000000000000000000000000000000000000000000602082015250565b60006114dd602283610e6f565b91506114e882611481565b604082019050919050565b6000602082019050818103600083015261150c816114d0565b9050919050565b7f45524332303a20696e73756666696369656e7420616c6c6f77616e6365000000600082015250565b6000611549601d83610e6f565b915061155482611513565b602082019050919050565b600060208201905081810360008301526115788161153c565b9050919050565b7f45524332303a207472616e736665722066726f6d20746865207a65726f20616460008201527f6472657373000000000000000000000000000000000000000000000000000000602082015250565b60006115db602583610e6f565b91506115e68261157f565b604082019050919050565b6000602082019050818103600083015261160a816115ce565b9050919050565b7f45524332303a207472616e7366657220746f20746865207a65726f206164647260008201527f6573730000000000000000000000000000000000000000000000000000000000602082015250565b600061166d602383610e6f565b915061167882611611565b604082019050919050565b6000602082019050818103600083015261169c81611660565b9050919050565b7f45524332303a207472616e7366657220616d6f756e742065786365656473206260008201527f616c616e63650000000000000000000000000000000000000000000000000000602082015250565b60006116ff602683610e6f565b915061170a826116a3565b604082019050919050565b6000602082019050818103600083015261172e816116f2565b905091905056fea2646970667358221220985cd12d495c3640fc231f7d9694132dd390940c2a25fc8b8564fede41d4cd5c64736f6c63430008090033';

type SquareConstructorParams = [signer?: Signer] | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (xs: SquareConstructorParams): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Square__factory extends ContractFactory {
  constructor(...args: SquareConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(overrides?: Overrides & { from?: string | Promise<string> }): Promise<Square> {
    return super.deploy(overrides || {}) as Promise<Square>;
  }
  override getDeployTransaction(overrides?: Overrides & { from?: string | Promise<string> }): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): Square {
    return super.attach(address) as Square;
  }
  override connect(signer: Signer): Square__factory {
    return super.connect(signer) as Square__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): SquareInterface {
    return new utils.Interface(_abi) as SquareInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): Square {
    return new Contract(address, _abi, signerOrProvider) as Square;
  }
}
